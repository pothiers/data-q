#!/bin/bash
#
# dataq        Init script for running the dataq daemon
#
# ckconfig: - 99 01
# description: Dataq manages a queue of data file records. It strives for \
#      resiliency. Records representing data files are read from a socket \
#      and queued for processing using predefined actions.
# processname: dataq
# config: /etc/sysconfig/dataq
# pidfile: /var/run/dataq/dqpush.pid
#
### BEGIN INIT INFO
# Provides: dataq
# Required-Start: $local_fs $remote_fs $network $redis
# Required-Stop: $redis
# Short-Description: start and stop Dataq Server
# Description: Dataq manages a queue of data file records. 
### END INIT INFO


# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/dataq ]; then
        . /etc/sysconfig/dataq
fi

#!!! TEMPORARY (haha) HACKS: point at  $HOME install dir
# Python3 and redis-py are required for this code. 
export PATH=$HOME/PYTHON_ENV/bin:/usr/bin:/sbin:/bin:/usr/sbin
export pushlog=/tmp/dataq-push.log
export poplog=/tmp/dataq-pop.log


bdir=/sandbox/data-q/src
dqpush=${DQPUSH-$bdir/dataq_push_svc.py}
dqpop=${DQPOP-$bdir/dataq_pop_svc.py}
prog=dataq
pidfilepush=${PIDFILEPUSH-/var/run/dataq/${dqpush##*/}.pid}
pidfilepop=${PIDFILEPOP-/var/run/dataq/${dqpop##*/}.pid}
lockfile=${LOCKFILE-/var/lock/subsys/$prog}
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}


conf_check() {
    #! [ -f /etc/sysconfig/dataq ] || exit 5      
    # Insure we have network access
    [ "${NETWORKING}" = "no" ] && exit 1     
}


start() {
    conf_check
	# Start daemons.
	echo -n $"Starting $prog [${dqpush##*/}]: "
    daemon --pidfile=${pidfilepush} nohup python3 $dqpush < /dev/null > $pushlog 2>&1 &
	RETVAL=$?
	[ $RETVAL = 0 ] && touch ${lockfile}  && echo_success
    echo
    retpush=$RETVAL

	echo -n $"Starting $prog [${dqpop##*/}]: "
    daemon --pidfile=${pidfilepop} nohup python3 $dqpop < /dev/null > $poplog 2>&1 &
	RETVAL=$?
	[ $RETVAL = 0 ] && touch ${lockfile}  && echo_success
    echo
    retpop=$RETVAL

	return $(( $retpush + $retpop ))
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p ${pidfilepush} -d ${STOP_TIMEOUT} $dqpush  
    retpush=$?
    echo
    [ $retpush -eq 0 ] && rm -f ${pidfilepush} 
    
    killproc -p ${pidfilepop} -d ${STOP_TIMEOUT} $dqpop
    retpop=$?
    echo
    [ $retpop -eq 0 ] && rm -f ${pidfilepop} 


    [ $retpush -eq 0 ] && [ $retpop -eq 0 ] && rm -f ${lockfile}
}



# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	    stop
	;;
  status)
        status -p ${pidfilepush} -l ${lockfile} $dqpush 
        retpush=$?

        status -p ${pidfilepop} -l ${lockfile} $dqpop 
        retpop=$?

	    RETVAL=$(( $retpush + $retpop))
	    ;;
  restart)
	stop
	start
	;;
  *)
	echo $"Usage: $prog {start|stop|restart|status|fullstatus|help|configtest}"
	RETVAL=2
esac

exit $RETVAL
